---
// Import the necessary AccordionItem component and JSON data
import AccordionItem from "@components/ui/blocks/AccordionItem.astro";

// Define props from Astro
const { title, faqs } = Astro.props;

// Define TypeScript interface for props
interface Faq {
  question: string;
  answer: string;
}

interface FaqGroup {
  subTitle?: string;
  faqs: Faq[];
}

interface Props {
  title: string;
  faqs: FaqGroup;
}
// Define a helper function to generate ids dynamically.
const makeId = (base: any, index: any) => `${base}${index + 1}`;
---

<!-- Main container that holds all content. Customized for different viewport sizes. -->
<section
  class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full"
>
  <div class="grid gap-10 md:grid-cols-5">
    <div class="md:col-span-2">
      <div class="max-w-xs">
        <h2
          class="text-2xl font-bold text-neutral-800 dark:text-neutral-200 md:text-4xl md:leading-tight"
        >
          <Fragment set:html={title} />
        </h2>
        <p class="mt-1 hidden text-neutral-600 dark:text-neutral-400 md:block">
          {faqs.subTitle}
        </p>
      </div>
    </div>
    <!-- FAQ accordion items -->
    <div class="md:col-span-3">
      <div
        class="hs-accordion-group divide-y divide-neutral-200 dark:divide-neutral-700"
      >
        {
          faqs.faqs.map((question, i) => {
            // Generate ids dynamically for each FAQ accordion item.
            let id = makeId(
              "hs-basic-with-title-and-arrow-stretched-heading-",
              i
            );
            let collapseId = makeId(
              "hs-basic-with-title-and-arrow-stretched-collapse",
              i
            );

            return (
              <AccordionItem
                {...question}
                id={id}
                collapseId={collapseId}
                first={i === 0}
              />
            );
          })
        }
      </div>
    </div>
  </div>
</section>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const accordionGroup = document.querySelector('.hs-accordion-group');
    if (!accordionGroup) return;

    accordionGroup.addEventListener('click', (event) => {
      const clickedToggle = event.target.closest('.custom-accordion-toggle');
      if (!clickedToggle) return;

      const clickedItem = clickedToggle.closest('.custom-accordion-item');
      const clickedContent = clickedItem.querySelector('.custom-accordion-content');
      const clickedIconNotActive = clickedItem.querySelector('.icon-not-active');
      const clickedIconActive = clickedItem.querySelector('.icon-active');

      const isActive = clickedItem.classList.contains('active');

      // Close all other accordion items in the group
      accordionGroup.querySelectorAll('.custom-accordion-item').forEach(item => {
        if (item !== clickedItem) {
          const content = item.querySelector('.custom-accordion-content');
          const toggle = item.querySelector('.custom-accordion-toggle');
          const iconNotActive = item.querySelector('.icon-not-active');
          const iconActive = item.querySelector('.icon-active');

          if (item.classList.contains('active')) {
            content.style.height = content.scrollHeight + 'px';
            setTimeout(() => {
              content.style.height = '0';
              content.style.display = 'none';
            }, 0);
            item.classList.remove('active');
            iconNotActive.classList.remove('hidden');
            iconActive.classList.add('hidden');
            toggle.setAttribute('aria-expanded', 'false');
          }
        }
      });

      // Toggle the clicked item
      if (isActive) {
        // Collapse
        clickedContent.style.height = clickedContent.scrollHeight + 'px';
        setTimeout(() => {
          clickedContent.style.height = '0';
          clickedContent.style.display = 'none';
        }, 0);
        clickedItem.classList.remove('active');
        clickedIconNotActive.classList.remove('hidden');
        clickedIconActive.classList.add('hidden');
        clickedToggle.setAttribute('aria-expanded', 'false');
      } else {
        // Expand
        clickedContent.style.display = 'block';
        clickedContent.style.height = '0'; // Reset height before expanding
        setTimeout(() => {
          clickedContent.style.height = clickedContent.scrollHeight + 'px';
        }, 0);
        clickedItem.classList.add('active');
        clickedIconNotActive.classList.add('hidden');
        clickedIconActive.classList.remove('hidden');
        clickedToggle.setAttribute('aria-expanded', 'true');
      }
    });
  });
</script>